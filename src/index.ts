import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import session from 'express-session';
import { initDb } from './initDb';
import authRoutes from './auth/auth.routes';
import publicationRoutes from './publications/publication.routes';
import userRoutes from './user/user.routes';
import chatRoutes from './chat/chat.routes';
import reportRoutes from './report/report.routes';
import notificationRoutes from './notifications/notification.routes';
import adminRoutes from './admin/admin.routes';
import WebSocket, { WebSocketServer } from 'ws';
import http from 'http';
import pool from './db';

dotenv.config();

const app = express();
const port = process.env.PORT || 8000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
  origin: 'http://localhost:3000',
  credentials: true,
}));

// –°–µ—Å—Å–∏–∏
app.use(session({
  secret: process.env.SESSION_SECRET || 'supersecretkey',
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: false,
    sameSite: 'lax',
  },
}));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json());

// –†–æ—É—Ç—ã
app.use('/api', authRoutes);
app.use('/api/publications', publicationRoutes);
app.use('/uploads', express.static('uploads'));
app.use('/api/user', userRoutes);
app.use('/api/chats', chatRoutes);
app.use('/api/report', reportRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/admin', adminRoutes);

app.get('/', (req, res) => {
  res.send('Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// WebSocket —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(app);
const wss = new WebSocketServer({ server, path: "/ws" }); // ‚úÖ path: /ws

type SocketWithUser = WebSocket & { userId?: number };
const clients = new Map<number, SocketWithUser>();

wss.on('connection', (ws: SocketWithUser, req) => {
  console.log("ws", ws, "req" , req)
  const url = new URL(req.url || '', 'http://localhost');
  const userId = parseInt(url.searchParams.get('userId') || '');

  if (!userId) {
    console.warn("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ userId");
    ws.close();
    return;
  }

  console.log("‚ö° –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ WebSocket:", userId);

  ws.userId = userId;
  clients.set(userId, ws);

  ws.on('message', async (data) => {
    try {
      const msg = JSON.parse(data.toString());
      const { chatId, senderId, receiverId, content } = msg;

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ senderId –≤ —á–∞—Ç–µ
      const chatCheck = await pool.query(
        'SELECT * FROM chats WHERE id = $1 AND (sender_id = $2 OR receiver_id = $2)',
        [chatId, senderId]
      );
      if (chatCheck.rowCount === 0) {
        console.warn("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á—É–∂–æ–π —á–∞—Ç:", { chatId, senderId });
        ws.send(JSON.stringify({ type: 'error', message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É' }));
        return;
      }

      const result = await pool.query(
        `INSERT INTO messages (chat_id, sender_id, content) VALUES ($1, $2, $3) RETURNING *`,
        [chatId, senderId, content]
      );

      const message = result.rows[0];

      // üì° –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
      [senderId, receiverId].forEach((id) => {
        const client = clients.get(id);
        if (client && client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({ type: 'new_message', message }));
        }
      });

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è:', err);
      try {
        ws.send(JSON.stringify({ type: 'error', message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' }));
      } catch (_) {}
    }
  });

  ws.on('ping', () => {
    ws.pong();
  });

  ws.on('close', () => {
    console.log("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", ws.userId);
    clients.delete(ws.userId!);
  });
});

// –ó–∞–ø—É—Å–∫
server.listen(port, async () => {
  try {
    await initDb();
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${port} (HTTP + WS /ws)`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
});
